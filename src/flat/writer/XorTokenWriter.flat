package flat/writer

import flat/ast
import flat/parser/matchers
import flat/log

import flat/writer/WriterPatternExtensions

import static flat/colorizer/Colorizer

data class extends TokenWriter {
  static Logger log = Logger(XorTokenWriter.class)

  XorTokenPattern pattern

  var TokenWriter writer

  override public validNode(Node node) => writer != null ? writer.validNode(node) : super.validNode(node)

  override public consumesNode() -> Bool {
    if (writer == null) return super.consumesNode()

    return writer.consumesNode()
  }

  override public write(WriterOutputStream output, Node node) {
    if (!writer) {
      writer = pattern.patterns.firstWhere({ _.getNodeType() == node.class })?.getWriter()

      if (!writer) {
        log.traceFunc({"Unable to determine writer for Xor pattern for node type #{green(node.class.name)}. Exhausted"})
        exhausted = true
        return
      }
    }

    innerWrite(output, node)
  }

  innerWrite(WriterOutputStream output, Node node) {
    log.infoFunc({"|
      Writing node #{green(node.class.name)} to writer #{green(writer.class.name)}
        pattern: #{magenta(writer.pattern.toPatternString())}
      |"})
    Logger.increaseTab()
    writer.write(output, node)
    Logger.decreaseTab()

    exhausted = writer.exhausted
  }
}