package flat/writer

import flat/ast
import flat/parser/matchers
import flat/compiler/models
import flat/log

import static flat/colorizer/Colorizer

data class extends TokenWriter {
    static Logger log = Logger(SingleTokenWriter.class)

    SingleTokenPattern pattern

    override public validNode(Node node) -> Bool {
        if (node == null) return false

        return super.validNode(node)
    }

    override public write(WriterOutputStream output, Node node) {
        dirty = true

        innerWrite(output, node)
    }

    innerWrite(WriterOutputStream output, Node node) {
        if (let field = pattern.field) {
            if (let nodeField = node.class.getField(field, true)) {
                if (let value = nodeField.getValue(node)) {
                    match value.class {
                        Token.class => output.writeToken((Token)value)
                        Array.class => output.writeTokens((Array)value)
                        default => output.writeString(value.toString())
                    }
                }
            } else {
                // throw Exception("Invalid field '#{field}' for Node type '#{node.class.name}'")
            }
        } else if (pattern.value) {
            output.writeToken(Token(type: pattern.type, value: pattern.value))
        } else {
            output.writeString("{{???}}")
            // throw Exception("Unable to determine token to write for pattern '#{pattern.toPatternString()}'")
        }

        exhausted = true
    }
}