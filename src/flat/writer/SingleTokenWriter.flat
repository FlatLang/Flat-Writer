package flat/writer

import flat/ast
import flat/parser/matchers
import flat/compiler/models

data class extends TokenWriter {
  SingleTokenPattern pattern

  override public write(WriterOutputStream output, Node node) {
    if (pattern.field) {
      if (let nodeField = node.class.getField(pattern.field, true)) {
        if (let value = nodeField.getValue(node)) {
          output.write(value.toString())
        }
      } else {
        throw Exception("Invalid field '#{pattern.field}' for Node type '#{node.class.name}'")
      }
    } else if (pattern.value) {
      output.write(Token(type: pattern.type, value: pattern.value))
    } else {
      throw Exception("Unable to determine token to write for pattern '#{pattern.toPatternString()}'")
    }
  }
}