package flat/writer

import flat/ast
import flat/parser/matchers
import flat/compiler/models

data class extends TokenWriter {
  SingleTokenPattern pattern

  override public write(WriterOutputStream output, Node node) {
    innerWrite(output, node)
  }

  innerWrite(WriterOutputStream output, Node node) {
    if (let field = pattern.field) {
      if (let nodeField = node.class.getField(field, true)) {
        if (let value = nodeField.getValue(node)) {
          match value.class {
            Token.class => output.write((Token)value)
            Array.class => output.write((Token[])value)
            default => output.write(value.toString())
          }
        }
      } else {
        // throw Exception("Invalid field '#{field}' for Node type '#{node.class.name}'")
      }
    } else if (pattern.value) {
      output.write(Token(type: pattern.type, value: pattern.value))
    } else {
      output.write("{{#{pattern.label}}}")
      // throw Exception("Unable to determine token to write for pattern '#{pattern.toPatternString()}'")
    }

    exhausted = true
  }
}