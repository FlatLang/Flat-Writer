package flat/writer

import flat/ast
import flat/annotations
import flat/parser
import flat/parser/flat
import flat/parser/matchers
import flat/compiler/models
import flat/writer/TestOutputStream_Test.TestOutputStream

testable class {
  test `can write group containing single explicit value token`() {
    let outputStream = TestOutputStream()
    let pattern = GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "test")
    ])
    let writer = GroupTokenWriter(pattern)

    writer.write(outputStream, Node())

    expect(outputStream.buffer).toBe([
      Token(type: Token.Type.IDENTIFIER, value: "test"),
    ])
    expect(writer.exhausted).toBe(true)
  }

  test `can write group containing single identifier field token`() {
    let outputStream = TestOutputStream()
    let pattern = GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.IDENTIFIER, field: "name")
    ])
    let writer = GroupTokenWriter(pattern)

    writer.write(outputStream, IdentifierNode(name: Token(type: Token.Type.IDENTIFIER, value: "bob")))

    expect(outputStream.buffer).toBe([
      Token(type: Token.Type.IDENTIFIER, value: "bob"),
    ])
    expect(writer.exhausted).toBe(true)
  }
}
