package flat/writer

import flat/ast
import flat/parser
import flat/parser/flat
import flat/parser/matchers
import flat/annotations
import flat/compiler/models
import flat/writer/TestOutputStream_Test.TestOutputStream

testable class {
  test `can buffer until smaller match is found`() {
    let outputStream = TestOutputStream()
    let pattern = XorTokenPattern<LocalDeclarationNode>([
      GroupTokenPattern([
        IdentifierParser().pattern,
      ]),
      GroupTokenPattern([
        NodeTokenPattern([ValueTypeParser()]),
        IdentifierParser().pattern,
      ])
    ])
    let writer = XorTokenWriter(pattern, outputStream)

    writer.write(LocalDeclarationNode())
    writer.write(IdentifierNode(name: Token(type: Token.Type.IDENTIFIER, value: "local")))
    writer.exhaust()

    expect(outputStream.buffer).toBe([
      Token(type: Token.Type.IDENTIFIER, value: "local"),
    ])
    expect(writer.exhausted).toBe(true)
  }

  test `can buffer until full match is found`() {
    let outputStream = TestOutputStream()
    let pattern = XorTokenPattern<LocalDeclarationNode>([
      GroupTokenPattern([
        IdentifierParser().pattern,
      ]),
      GroupTokenPattern([
        NodeTokenPattern([ValueTypeParser()]),
        IdentifierParser().pattern,
      ])
    ])
    let writer = XorTokenWriter(pattern, outputStream)

    writer.write(LocalDeclarationNode())
    writer.write(TypeNode(name: Token(type: Token.Type.IDENTIFIER, value: "String")))
    writer.write(IdentifierNode(name: Token(type: Token.Type.IDENTIFIER, value: "local")))
    writer.exhaust()

    expect(outputStream.buffer).toBe([
      Token(type: Token.Type.IDENTIFIER, value: "String"),
      Token(type: Token.Type.IDENTIFIER, value: "local"),
    ])
    expect(writer.exhausted).toBe(true)
  }

  test `does not duplicate tokens from buffer when using a precondition token pattern`() {
    let outputStream = TestOutputStream()
    let pattern = XorTokenPattern<LocalDeclarationNode>([
      GroupTokenPattern([
        PreconditionTokenPattern(annotations: [LetModifier.class]),
        IdentifierParser().pattern,
      ]),
    ])
    let writer = XorTokenWriter(pattern, outputStream)

    writer.write(LocalDeclarationNode())
    writer.write(IdentifierNode(name: Token(type: Token.Type.IDENTIFIER, value: "local")))
    writer.exhaust()

    expect(outputStream.buffer).toBe([
      Token(type: Token.Type.IDENTIFIER, value: "local"),
    ])
    expect(writer.exhausted).toBe(true)
  }

  test `can write basic type from multiple valid patterns`() {
    let outputStream = TestOutputStream()
    let pattern = XorTokenPattern([
      GroupTokenPattern([
        NodeTokenPattern([ValueTypeParser()]),
        GroupTokenPattern([
          SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "extends"),
          NodeTokenPattern([ValueTypeParser()]),
        ], optional: true),
      ]),
      NodeTokenPattern([FunctionTypeParser()]),
    ])
    let writer = XorTokenWriter(pattern, outputStream)

    writer.write(TypeNode(name: Token(type: Token.Type.IDENTIFIER, value: "E")))
    writer.exhaust()

    expect(outputStream.buffer).toBe([
      Token(type: Token.Type.IDENTIFIER, value: "E"),
    ])
    expect(writer.exhausted).toBe(true)
  }
}
