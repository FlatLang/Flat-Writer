package flat/writer

import flat/ast
import flat/parser/matchers
import flat/log

import static flat/colorizer/Colorizer

abstract data class {
  static Logger log = Logger(Writer.class)

  visible TokenPattern pattern

  var Bool _exhausted = false
  visible var Bool exhausted <=> _exhausted

  lazy BufferWriterOutputStream buffer => BufferWriterOutputStream()

  abstract public write(WriterOutputStream output, Node node)

  public exhaust(WriterOutputStream output) {
    log.infoFunc({"Ending current writer"})
  }

  public validNode(Node node) => pattern.getNodeType() != Node.class && node.class.isOfType(pattern.getNodeType())
  public validNodes(Node[] nodes) => nodes.all({ validNode(_) })

  public consumesNode() => pattern.getNodeType() != Node.class
  public requiresNode() => !pattern.optional && consumesNode()
  public writePrimitiveTokens(WriterOutputStream output, Node node) => true {
    log.infoFunc({"Writing primitive Tokens #{magenta(pattern.toPatternString())}"})
    write(output, node)
  }

  public reset() {
    _exhausted = false
  }
}